version: "3.8"

services:
  reverse_proxy:
    image: nginx
    ports:
      - "8080:80"
    volumes:
      - ./reverse_proxy/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./reverse_proxy/config/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    container_name: reverse_proxy
    command: [nginx-debug, '-g', 'daemon off;']
    restart : always
    networks:
      - transcendence

  backend:
    container_name: backend
    image: backend
    build:
      dockerfile: Dockerfile
      context: ./backend
    restart: unless-stopped
    # command: npm run start:dev
    volumes:
      - ./backend/app/:/app
      - ./backend/script:/srv
    ports:
      - 3000:3000
      - 5555:5555
    networks:
      transcendence:
        ipv4_address: 172.19.0.40
    mem_limit: 4G

  # frontProd:
  #   container_name: frontProd
  #   image: nginx
  #   ports:
  #     - "8080:80"
  #   networks:
  #     transcendence:
  #       ipv4_address: 172.19.0.21

  front:
    container_name: front
    image: front
    build:
      dockerfile: Dockerfile
      context: ./front
    restart: unless-stopped
    volumes:
      - ./front/app:/app
    ports:
      - 3001:3000
    networks:
      transcendence:
        ipv4_address: 172.19.0.41
    links:
      - backend

  postgres:
    container_name: postgres
    image: postgres:15
    restart: always
    # depends_on:
    #   - backend
    env_file:
      - ./backend/app/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DB: ${POSTGRES_DB} 
    ports:
      - 6500:5432
    volumes: 
       - postgres:/var/lib/postgresql/data
    networks:
      transcendence:
        ipv4_address: 172.19.0.42

networks:
  transcendence:
    name: transcendence
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/16
          gateway: 172.19.0.1
    internal: false

volumes:
  postgres:
    name: postgres
    driver: local