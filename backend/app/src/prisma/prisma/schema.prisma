generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnonymousUser {
  uuid                     String  @unique
  password                 String
  token                    String
  lastConnection           String
  userCreatedAt            String
  revokeConnectionRequest  Boolean
  isRegistredAsRegularUser Boolean
}

model ChatJson {
  chatJsonID String @id @default(uuid())
  contents   String
}

model Chat {
  chatId            String    @id @default(uuid())
  chanMap           Json[]
  privateMessageMap Json[]
  channels          Channel[]
  users             User[]
}

model User {
  name         String         @unique
  chatId       String
  friends      Json[]
  isAdmin      Role           @default(BASIC)
  userId       String         @id @default(uuid())
  blocked      BlockedUser[]
  chat         Chat           @relation(fields: [chatId], references: [chatId])
  UserChannels UserChannels[]
  channels     Channel[]      @relation("UserChannels")
}

model Channel {
  channelId    String         @id @default(uuid())
  mode         ChanMode       @default(PUBLIC)
  owner        String
  name         String         @unique
  password     String?
  messages     Json[]
  members      Int
  chatId       String
  admins       Admins[]
  banned       BannedUser[]
  chat         Chat           @relation(fields: [chatId], references: [chatId])
  UserChannels UserChannels[]
  users        User[]         @relation("UserChannels")
}

model UserChannels {
  userId    String
  channelId String
  Channel   Channel @relation(fields: [channelId], references: [channelId])
  User      User    @relation(fields: [userId], references: [userId])

  @@id([userId, channelId])
}

model BannedUser {
  id        String  @id @default(uuid())
  channelId String
  channel   Channel @relation(fields: [channelId], references: [channelId])
}

model BlockedUser {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [userId])
}

model Admins {
  id        String  @id @default(uuid())
  channelId String
  channel   Channel @relation(fields: [channelId], references: [channelId])
}

enum Role {
  BASIC
  ADMIN
  OWNER
}

enum ChanMode {
  PUBLIC
  PRIVATE
  PROTECTED
}
